set ts=4
set sw=4
set softtabstop=4	" aka sts ne fonctionne pas avec vi
set listchars=tab:→\ ,eol:¬,trail:⋅,nbsp:⋅
"set cc=81 wrap
"set nu
set vb t_vb=
set noerrorbells

if  ! has("compatible")
"	A partir d'ici la configuration n'est pas compatible avec vi.

if ! exists( "g:first_load" )
	" Permet d'éviter certaines actions sur
	" un rechargement du fichier
	let g:first_load=1
else
	let g:first_load=0
endif

set modeline

"	Pathogen
let g:pathogen_disabled = []
if has("gui_running")
	call add(g:pathogen_disabled, 'vim-togglemouse')
else
	"	Par défaut c'est le terminal qui à la sourie.
	"	togglemouse map la touche F12 pour switcher entre le terminal et vim.
	let &mouse=""
endif

call pathogen#infect()
call pathogen#helptags()

if g:first_load == 1
	if has("gui_running")
		set columns=120
		set lines=48
		winpos 0 36
	endif
endif

"	Pour vim-markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_toc_autofit = 1
set conceallevel=2

" Pour mes fichiers template et .md je désactive la syntaxe
autocmd BufRead *.template,*.doc.sh,*.md set syn=off

"	Activé pour le plugin markdown
filetype plugin on

" Change the mapleader from \ to ,
let mapleader=","
let maplocalleader="\\"

"	Recharge automatiquement les fichiers modifiés.
set autoread

"   Ne charge pas le driver noshowmatch qui est trop lent.
let loaded_matchparen = 1

"Pour que airline soit visible tout le temps
set laststatus=2

"Search
set hlsearch
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

"	============================================================================
"	Syntastic : configuration conseillé
"	============================================================================
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
" Ne fonctionne pas avec Airline :(
set statusline+=%{&spelllang}

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

autocmd BufRead *.template,*.doc.sh let g:syntastic_check_on_open = 0

"	============================================================================
source $HOME/vimfunc/ApplyConfigOnFileType.vim
autocmd! BufRead * call ApplyConfigOnFileType()

"	============================================================================
source $HOME/vimfunc/FrDictionnaire.vim
nnoremap <F2> :call FrDictionnaire()<CR>

"	============================================================================
source $HOME/vimfunc/FrGrammaire.vim
nnoremap <C-g> :call FrGrammaire()<CR>

"	============================================================================
source $HOME/vimfunc/folding.vim
"	Permet de (un)folder la fonction courante avec la touche space.
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

map <F3> :call ToggleAllFolders()<CR>
autocmd BufRead * call EnableShellFoldBrace()

"	============================================================================
source $HOME/vimfunc/ToggleHOME2Plescripts.vim
map <silent> <F4> :call ToggleHOME2Plescripts()<CR>

"	============================================================================
"	NERDTree
"	============================================================================
let NERDTreeIgnore=['\.swp$', '\~$']

if has( "gui_running" )
	" NERDTree ouvert automatiquement
	autocmd VimEnter * NERDTree %:p:h
else
	" NERDTree ouvert si aucun fichier n'est passé en paramètre.
	autocmd StdinReadPre * let s:std_in=1
	autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree %:p:h | endif
endif
map <silent> <F5> :NERDTreeToggle<CR>

"Si NERDTree est la dernière fenêtre ouverte alors quitter [G]vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Go to previous (last accessed) window.
autocmd VimEnter * wincmd p

"	============================================================================
source $HOME/vimfunc/ToggleColorscheme.vim
map <silent> <F6> :call ToggleColorscheme()<CR>

"	============================================================================
"	UndoTree
"	============================================================================
let g:undotree_WindowLayout=3
nnoremap <silent> <F7> :UndotreeToggle<CR>

"	============================================================================
"	clean_log
"	============================================================================
source $HOME/vimfunc/CleanLog.vim
autocmd BufRead * call CleanLog()
nnoremap <silent> <F8> :call CleanLog()<CR>

"	============================================================================
"	Tips
"	============================================================================
source $HOME/vimfunc/ToggleVimTips.vim
nnoremap <silent> <F9> :call ToggleVimTips()<CR>

"	============================================================================
"	Recharger .vimrc
"	============================================================================
map <F10> :so $MYVIMRC<CR>

"	============================================================================
"	Permet de ce déplacer d'une modification à l'autre.
"	============================================================================
nnoremap <silent> <C-p> :GitGutterPrevHunk<CR>
nnoremap <silent> <C-n> :GitGutterNextHunk<CR>

"	============================================================================
"	Fait un man du mot sous le curseur.
"	============================================================================
source $HOME/vimfunc/ManWordUnderTheCursor.vim
nnoremap <silent> <C-M> :call ManWordUnderTheCursor()<CR>

function! TocMarkdown()
	call system('gh-md-toc ' . shellescape(bufname("%")) . " >/tmp/toc.md")
	set previewheight=15
	pedit! /tmp/toc.md
endfunction
nnoremap <silent> <C-t> :call TocMarkdown()<CR>

"	============================================================================
source $HOME/vimfunc/ManWordUnderTheCursor.vim
nnoremap <silent> <C-m> :call ManWordUnderTheCursor()<CR>

"	============================================================================
"	Recherche de la fonction correspondante
function! SearchFunctionLib( func )
	let l:res = system( 'vimsearchfunc.sh -script=' . shellescape(bufname("%")) . ' -funcName=' . a:func )
	if l:res == 'not found'
		return 1
	else
		let l:sp = split( l:res )
		exe 'pedit +' . l:sp[0] . ' ' . l:sp[1]
		return 0
	endif
endfunction

function! SearchFunction()
	let l:wordUnderCursor = expand("<cword>")
	let l:funcPattern="function " . l:wordUnderCursor . '$'
	echo "Search " . l:funcPattern
	if search( l:funcPattern, 'b' ) == 0
		if search( l:funcPattern ) == 0
			call SearchFunctionLib( l:wordUnderCursor )
			"echo "Function : " . l:wordUnderCursor . " not found"
		endif
	endif
endfunction
nnoremap <leader>f :call SearchFunction()<CR>
 
"	============================================================================
"	xolox/vim-session
"let g:session_autoload='yes'
"let g:session_autosave='yes'
endif "!has("compatible")

