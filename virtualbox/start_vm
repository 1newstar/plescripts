#!/bin/bash
# vim: ts=4:sw=4

[ ! -t 0 ] && PLELIB_OUTPUT=DISABLE || true
. ~/plescripts/plelib.sh
. ~/plescripts/virtualbox/vboxlib.sh
. ~/plescripts/usagelib.sh
. ~/plescripts/global.cfg
EXEC_CMD_ACTION=EXEC

typeset -r ME=$0
typeset -r PARAMS="$*"

typeset		server=undef
typeset		wait_os=yes
typeset		lsvms=yes

if [[ x"$ID_DB" == x || "$ID_DB" == undef ]]
then
	add_usage "-server=name|name"	"Obligatoire \$ID_DB non définie, cf set_db."
else
	add_usage "[-server=name]"		"Si non définie démarre les serveurs correspondants au pattern srv$ID_DB[0-9][0-9]."
fi
add_usage "[-wait_os=$wait_os]"		"yes|no, yes : attend le démarrage complet de l'OS avant de poursuivre."
add_usage "[-lsvms=$lsvms]"			"yes|no, yes : affiche l'état des VM."

typeset -r str_usage=\
"Usage : $ME
$(print_usage)
"

while [ $# -ne 0 ]
do
	case $1 in
		-emul)
			EXEC_CMD_ACTION=NOP
			first_args=-emul
			shift
			;;

		-server=*)
			server=${1##*=}
			shift
			;;

		-lsvms=*)
			lsvms=$(to_lower ${1##*=})
			shift
			;;

		-wait_os=*)
			wait_os=${1##*=}
			shift
			;;

		-dataguard=*)
			warning "Parameter '$1' obsolete."
			shift
			;;

		-h|-help|help)
			info "$str_usage"
			LN
			exit 1
			;;

		*)
			if [ $server == undef ]
			then
				if [[ "${1:0:3}" == srv || "$1" == "$infra_hostname" || "$1" == "$master_hostname" ]]
				then
					# Recherche les serveurs sur le pattern srv ou une des 2
					# VM d'infra.
					server=$1
				else
					# Toutes les VM qui correspondront au pattern ci dessous
					# seront démarrées.
					server="srv$1[0-9][0-9]"
				fi
				shift
			else
				error "Arg '$1' invalid."
				LN
				info "$str_usage"
				exit 1
			fi
			;;
	esac
done

if [ $server == undef ]
then
	[[ x"$ID_DB" != x && "$ID_DB" != undef ]] && server="srv$ID_DB[0-9][0-9]" || true
fi
exit_if_param_undef		server	"$str_usage"

exit_if_param_invalid	wait_os	"yes no" "$str_usage"

#	Load to vm_list all server who match $server
#	exit 1 if no server found.
function load_vm_list
{
	while read vm_name
	do
		[ x"$vm_name" != x ] && vm_list+=( $vm_name )
	done<<<"$(VBoxManage list vms | grep -E "$server" | cut -d\" -f2)"

	info "${#vm_list[@]} server(s) found for pattern $server : ${vm_list[*]}"
	LN

	[ ${#vm_list[@]} -eq 0 ] && exit 1 || true
}

typeset -a vm_list			# Nom de toutes les VMs.
typeset -i nr_vm_started=0	# Nombre de VM démarré.
typeset	-a vm_started_list	# Nom des VMs démarrées.

if [ $server != $infra_hostname ] && ! vm_running $infra_hostname
then
	info "Start infra server : $infra_hostname."
	exec_cmd "start_vm $infra_hostname -lsvms=no"
	LN
fi

#	============================================================================
load_vm_list

#	============================================================================
#	Démarre les VMs :
for vm in ${vm_list[*]}
do

	if vm_running $vm
	then
		info "$vm is running."
		LN
		continue
	fi

	exec_cmd -c "VBoxManage startvm $vm --type headless"
	if [ $? -eq 0 ]
	then
		sleep 2	# RAC 12.2 le premier nœud par tjrs en live.
		((++nr_vm_started))
		vm_started_list+=( $vm )
	else
		error "Failed to start $vm"
	fi
	LN
done

#	============================================================================
if [[ $EXEC_CMD_ACTION == EXEC && $wait_os == yes ]]
then
	line_separator
	for vm in ${vm_started_list[*]}
	do
		exec_cmd wait_server $vm
		LN
	done
fi

#	============================================================================
if [[ $PLELIB_OUTPUT != DISABLE && $lsvms == yes ]]
then
	line_separator
	exec_cmd "lsvms"
fi

#	============================================================================
if [ $nr_vm_started -eq ${#vm_list[@]} ]
then
	exit 0	# Toutes les VMs ont démarrés.
else
	exit 1	# Au moins une VM n'a pas démarré.
fi
