#!/bin/bash
# vim: ts=4:sw=4

. ~/plescripts/plelib.sh
. ~/plescripts/cfglib.sh
. ~/plescripts/usagelib.sh
. ~/plescripts/virtualbox/vboxlib.sh
. ~/plescripts/global.cfg
EXEC_CMD_ACTION=EXEC

typeset	-r	ME=$0
typeset	-r	PARAMS="$*"

typeset		server=undef
typeset		error_on_poweroff=no
typeset	-i	dg_node=-1
typeset		lsvms=yes

add_usage "[server name]"			"Server name or db identifier's."
add_usage "[-server=server name]"	"Full server name"
add_usage "[-error_on_poweroff]"	"On poweroff return 1"
add_usage "[-lsvms=$lsvms]"			"yes|no"
add_usage "[1|2|all]"				"Dataguard node number"

typeset	-r	str_usage=\
"Usage :
${ME##*/}
$(print_usage)
"

while [ $# -ne 0 ]
do
	case $1 in
		-emul)
			EXEC_CMD_ACTION=NOP
			shift
			;;

		-server=*)
			server=${1##*=}
			shift
			;;

		-lsvms=*)
			lsvms=$(to_lower ${1##*=})
			shift
			;;

		1|2)
			dg_node=$1
			shift
			;;

		all)
			dg_node=99
			shift
			;;

		-error_on_poweroff)
			error_on_poweroff=yes
			shift
			;;

		-h|-help|help)
			info "$str_usage"
			LN
			exit 1
			;;

		*)
			if [ $server == undef ]
			then
				server=$1
				shift
			else
				error "Arg '$1' invalid."
				LN
				info "$str_usage"
				exit 1
			fi
			;;
	esac
done

if [[ "$server" == undef ]]
then
	if [[ -v ID_DB ]]
	then
		server=$ID_DB
		if cfg_exists $server
		then
			cfg_load_node_info $server 1
			if [ $cfg_dataguard == yes ]
			then
				if [[ $dg_node -ne 1 && $dg_node -ne 2 && $dg_node -ne 99 ]]
				then
					error "Dataguard member add node number 1 or 2 or all"
					LN
					exit 1
				elif [ $dg_node -ne 99 ]
				then
					cfg_load_node_info $server $dg_node
					server=$cfg_server_name
				fi
			fi
		fi
	else
		error "Identifant not defined (use set_db)."
		LN
		info "$str_usage"
		LN
		exit 1
	fi
elif is_number $server
then
	error "Error server cannot be a number."
	LN
	info "$str_usage"
	LN
	exit 1
fi

exit_if_param_undef server	"$str_usage"

typeset	-a	running_db_server_list

# Si dès VMs sont actives elles sont mémorisés dans running_db_server_list.
# return 0 si des VMs sont actives, 1 sinon.
function load_running_vms
{
	while read vm_name rem
	do
		[ x"$vm_name" == x ] && continue || true

		vm_name=$(cut -d\" -f2<<<"$vm_name")
		if [ ${vm_name:0:3} == "srv" ]
		then
			id=$(sed "s/srv\(.*\)..$/\1/"<<<"$vm_name")
			if ! grep -q $id <<<"${running_db_server_list[*]}"
			then
				running_db_server_list+=( $id )
			fi
		fi

	done<<<"$(VBoxManage list runningvms)"

	[ ${#running_db_server_list[@]} -eq 0 ] && return 1 || return 0
}

if ! vm_running $server
then
	error "VM $server not running."
	LN
	exit 1
fi

if [ "$server" == "$infra_hostname" ]
then # On doit arrêter les serveurs de BDD pour arrêter le serveur d'infra.
	if load_running_vms
	then
		info "DB servers running : ${running_db_server_list[*]}"
		confirm_or_exit "Stop them"

		for vm in ${running_db_server_list[*]}
		do
			exec_cmd stop_vm -server=$vm -dataguard=no
		done
		LN
	fi
fi

case $error_on_poweroff in
	no)
		exec_cmd stop_vm -server=$server -dataguard=no
		LN
		;;
	yes)
		exec_cmd stop_vm -server=$server -error_on_poweroff -dataguard=no
		LN
		;;
esac

line_separator
exec_cmd "start_vm $server -wait_os=no -dataguard=no -lsvms=no"
LN

if [ ${#running_db_server_list[@]} -ne 0 ]
then
	for vm in ${running_db_server_list[*]}
	do
		exec_cmd start_vm -server=$vm -wait_os=no -dataguard=no -lsvms=no
	done
	LN
fi

if [ $lsvms == yes ]
then
	line_separator
	lsvms
fi
