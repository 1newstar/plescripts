#!/bin/bash
# vim: ts=4:sw=4

. ~/plescripts/plelib.sh
. ~/plescripts/global.cfg
EXEC_CMD_ACTION=EXEC

typeset -r ME=$0
typeset -r str_usage=\
"Usage : $ME
	-server=<nom de la VM> si omis essait la variable ID_DB
	[-wait_os]     : attend que l'OS soit stoppé avant de rendre la main.
	[-reboot_vbox] : reboot tous les composants de vbox.
"

script_banner $ME $@

typeset server=undef
typeset	wait_os=no
typeset reboot_vbox=no

while [ $# -ne 0 ]
do
	case $1 in
		-emul)
			EXEC_CMD_ACTION=NOP
			first_args=-emul
			shift
			;;

		-server=*)
			server=${1##*=}
			shift
			;;

		-wait_os)
			wait_os=yes
			shift
			;;

		-reboot_vbox)
			reboot_vbox=yes
			shift
			;;

		-h|-help|help)
			info "$str_usage"
			LN
			exit 1
			;;

		*)
			if [ $server == undef ]
			then
				server=$1
				shift
			else
				error "Arg '$1' invalid."
				LN
				info "$str_usage"
				exit 1
			fi
			;;
	esac
done

[[ $server == undef ]] && [[ -v ID_DB ]] && server=$ID_DB
exit_if_param_undef server	"$str_usage"

[ $reboot_vbox == yes ] && wait_os=yes

function wait_os_until_stopped
{
	typeset -r os_name="$1"

	info "Server $os_name stopping..."
	while [ 0 -eq 0 ]
	do
		VBoxManage list runningvms | grep -q $os_name
		[ $? -eq 1 ] && break
	done
}

#===============================================================================
#	Charge le nom des VMs dans vm_list

typeset -a vm_list	#	Contient le nom de toutes les VMs

while read vm_name
do
	[ x"$vm_name" != x ] && vm_list+=( $vm_name )
done<<<"$(VBoxManage list vms | grep "$server" | cut -d\" -f2)"

typeset -ri max_vms=${#vm_list[@]}
info "$max_vms server(s) found for pattern $server : ${vm_list[@]}"
LN
[ $max_vms -eq 0 ] && exit 1

#===============================================================================
# Stop les VMs et mémorise leur nom dans vm_stopped_list

typeset -a vm_stopped_list

typeset -i count_errors=0

#	Stop toutes les VMs
for vm in ${vm_list[@]}
do
	line_separator
	exec_cmd -c "VBoxManage controlvm $vm acpipowerbutton"
	if [ $? -ne 0 ]
	then
		error "Failed to stop $vm"
		LN

		line_separator
		info "Poweroff : $vm"
		exec_cmd -c "VBoxManage controlvm $vm poweroff"
		if [ $? -ne 0 ]
		then
			error "Failed to poweroff $vm"
			count_errors=count_errors+1
		fi
	else
		vm_stopped_list+=( $vm )
	fi
	LN
done

#===============================================================================
if [ $wait_os == yes ]
then	# Attend que toutes les VMs soient stoppée.
	typeset -ri	stop_at=$SECONDS
	line_separator
	typeset -i count=0
	for os_2_wait in ${vm_stopped_list[*]}
	do
		wait_os_until_stopped "$os_2_wait"
		[ $count -ne 0 ] && LN
		count=count+1
	done
	typeset -ri	duration=$(( SECONDS - stop_at ))
	info "Total wait : $(fmt_seconds $duration)."
	timing 2
fi

#===============================================================================
if [ $count_errors -ne 0 ]
then
	warning "$count_errors failed."
	exit 1
else
	if [[ $reboot_vbox == yes && $(VBoxManage list runningvms | wc -l) -eq 1 ]]
	then # Ne fonctionnera qu'avec l'option -wait_os
		exec_cmd "~/plescripts/virtualbox/restart_vboxdrv.sh"
	fi
	exit 0
fi
