#!/bin/bash
# vim: ts=4:sw=4

. ~/plescripts/plelib.sh
. ~/plescripts/usagelib.sh
. ~/plescripts/global.cfg
EXEC_CMD_ACTION=EXEC

typeset -r ME=$0

script_banner $ME $@

typeset server=undef
typeset	wait_os=yes
typeset reboot_vbox=no
typeset error_on_poweroff=no
typeset	dataguard=yes

add_usage "[-server=name]"			"Si non définie testera ID_DB (cf set_db)"
add_usage "[-dataguard=$dataguard]"	"yes|no, yes : arrête toutes les VMs du dataguard."
add_usage "[-wait_os=$wait_os]"		"yes|no, yes : attend l'arrêt complet de l'OS avant de poursuivre."
add_usage "[-reboot_vbox]"			"Reboot tous les composants de vbox."
add_usage "[-error_on_poweroff]"	"Si un poweroff est nécessaire retourne 1"

typeset -r str_usage=\
"Usage : $ME
$(print_usage)
"

while [ $# -ne 0 ]
do
	case $1 in
		-emul)
			EXEC_CMD_ACTION=NOP
			shift
			;;

		-server=*)
			server=${1##*=}
			shift
			;;

		-wait_os=*)
			wait_os=${1##*=}
			shift
			;;

		-reboot_vbox)
			reboot_vbox=yes
			shift
			;;

		-error_on_poweroff)
			error_on_poweroff=yes
			shift
			;;

		-dataguard=*)
			dataguard=${1##*=}
			shift
			;;

		-h|-help|help)
			info "$str_usage"
			LN
			exit 1
			;;

		*)
			if [ $server == undef ]
			then
				server=$1
				shift
			else
				error "Arg '$1' invalid."
				LN
				info "$str_usage"
				exit 1
			fi
			;;
	esac
done

[[ $server == undef && -v ID_DB ]] && server=$ID_DB || true
exit_if_param_undef server	"$str_usage"

function wait_os_until_stopped
{
	typeset -r os_name="$1"

	typeset	-ri	wait_max_secs=120
	typeset	-i	secs=0

	typeset tod_color

	hide_cursor
	info -n "Server $os_name stopping "
	while [ 0 -eq 0 ]
	do
		VBoxManage list runningvms | grep -q $os_name
		[ $? -eq 1 ] && LN && break
		info -f -n "${tod_color}.${NORM}"
		if [ $secs -eq $wait_max_secs ]
		then
			LN
			warning "$os_name not stopped after ${secs} s"
			exec_cmd -c "VBoxManage controlvm $os_name poweroff"
			break
		elif [[ $secs -ne 0 && $(( secs % 10 )) -eq 0 ]]
		then
			info -f -n "${secs}s"
			if [[ $secs -ge 30 && $secs -lt 60 ]]
			then
				tod_color=$PINK
			elif [[ $secs -ge 60 && $sec -lt 90 ]]
			then
				tod_color=$YELLOW
			elif [[ $sec -ge 90 ]]
			then
				tod_color=$RED
			fi
		fi
		sleep 1
		secs=secs+1
	done
	show_cursor
}

#	$1 vm name
#	print group name to stdout
function group_name_for_vm
{
	VBoxManage showvminfo "$1" | grep -E "^Groups:" | cut -d/ -f2-
}

#	$1 group name
#	$2 vm name to exclude
#	register all VMs in group $1 to dataguard_list
#	Declare dataguard_list before to call function : typeset -a dataguard_list
function load_vm_in_group
{
	typeset -r search_group="$1"
	typeset	-r exclude="$2"

	while read vm_name
	do
		[[ x"$vm_name" == x || "$vm_name" == "$exclude" ]] && continue || true

		if [ "$(group_name_for_vm $vm_name)" == "$search_group" ]
		then
			dataguard_list+=( $vm_name ) 
		fi
	done<<<"$(VBoxManage list vms | cut -d\" -f2)"
}

#	$1 vm name
function stop_vm_name
{
	typeset -r vm_to_stop="$1"

	exec_cmd -c "VBoxManage controlvm $vm_to_stop acpipowerbutton"
	if [ $? -ne 0 ]
	then
		error "Failed to stop $vm_to_stop"
		LN

		if [ $error_on_poweroff == yes ]
		then
			((++count_errors))
		else
			line_separator
			info "Poweroff : $vm_to_stop"
			exec_cmd -c "VBoxManage controlvm $vm_to_stop poweroff"
			if [ $? -ne 0 ]
			then
				error "Failed to poweroff $vm_to_stop"
				((++count_errors))
			fi
		fi
	else
		vm_stopped_list+=( $vm_to_stop )
	fi
}

#===============================================================================
#	Charge le nom des VMs dans vm_list

typeset -a vm_list	#	Contient le nom de toutes les VMs
typeset -a vm_stopped_list
typeset	-a dataguard_list
typeset -i count_errors=0

while read vm_name
do
	[ x"$vm_name" != x ] && vm_list+=( $vm_name )
done<<<"$(VBoxManage list runningvms | grep "$server" | cut -d\" -f2)"

typeset -i max_vms=${#vm_list[@]}
info "$max_vms running VMs found for pattern $server : ${vm_list[@]}"
LN

[ $max_vms -eq 0 ] && exit 0 || true

unset max_vms # ne doit plus être utilisé, la taille de la liste pour varier.

#===============================================================================
# Stop les VMs et mémorise leur nom dans vm_stopped_list

line_separator
#	Stop toutes les VMs
for vm in ${vm_list[@]}
do
	stop_vm_name "$vm"

	if [[ $dataguard == yes && ${#vm_list[@]} -eq 1 ]]
	then # Actuellement seul les serveurs standalone sont en DG.
		dg_group="$(group_name_for_vm $vm)"
		if [ "${dg_group:0:2}" == "DG" ]
		then
			load_vm_in_group "$dg_group" "$vm"
		fi
	fi

	LN
done

#	============================================================================
#	Arrête les éventuelles autres VMs du dataguard.
if [ ${#dataguard_list[@]} -ne 0 ]
then
	line_separator
	info "Stop dataguard members : ${dataguard_list[*]}"
	for vm_name in ${dataguard_list[*]}
	do
		vm_list+=( $vm_name )
		stop_vm_name "$vm_name"
		LN
	done
fi

#===============================================================================
if [[ $EXEC_CMD_ACTION == EXEC && $wait_os == yes ]]
then	# Attend que toutes les VMs soient stoppée.
	typeset -ri	stop_at=$SECONDS
	line_separator
	typeset -i count=0
	for os_2_wait in ${vm_stopped_list[*]}
	do
		wait_os_until_stopped "$os_2_wait"
		[ $count -ne 0 ] && LN
		count=count+1
	done
	typeset -ri	duration=$(( SECONDS - stop_at ))
	info "Total waiting : $(fmt_seconds $duration)"
	timing 2
fi

#===============================================================================
if [ $count_errors -ne 0 ]
then
	warning "$count_errors failed."
	exit 1
else
	if [[ $reboot_vbox == yes && $(VBoxManage list runningvms | wc -l) -eq 1 ]]
	then # Ne fonctionnera qu'avec l'option -wait_os
		exec_cmd "~/plescripts/virtualbox/restart_vboxdrv.sh"
	fi
	exit 0
fi
