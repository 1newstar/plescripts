#!/bin/bash
# vim: ts=4:sw=4

[ ! -t 0 ] && PLELIB_OUTPUT=DISABLE || true
. ~/plescripts/plelib.sh
. ~/plescripts/virtualbox/vboxlib.sh
. ~/plescripts/cfglib.sh
. ~/plescripts/usagelib.sh
. ~/plescripts/global.cfg
EXEC_CMD_ACTION=EXEC

typeset	-r	ME=$0
typeset	-r	PARAMS="$*"

typeset		db=none
typeset		server=undef
typeset		wait_os=yes
typeset		error_on_poweroff=no

if [[ x"$ID_DB" == x || "$ID_DB" == undef ]]
then
	add_usage "-server=name|name"	"Obligatoire \$ID_DB non définie, cf set_db."
else
	add_usage "[-server=name]"		"Si non définie stop les serveurs correspondants au pattern srv$ID_DB[0-9][0-9]."
fi
add_usage "[-wait_os=$wait_os]"		"yes|no, yes : attend l'arrêt complet de l'OS avant de poursuivre."
add_usage "[-error_on_poweroff]"	"Si un poweroff est nécessaire retourne 1"

typeset	-r	str_usage=\
"Usage : $ME
$(print_usage)
"

while [ $# -ne 0 ]
do
	case $1 in
		-emul)
			EXEC_CMD_ACTION=NOP
			shift
			;;

		-server=*)
			server=${1##*=}
			shift
			;;

		-wait_os=*)
			wait_os=${1##*=}
			shift
			;;

		-error_on_poweroff)
			error_on_poweroff=yes
			shift
			;;

		-dataguard=*)
			warning "Parameter '$1' obsolete."
			shift
			;;

		-h|-help|help)
			info "$str_usage"
			LN
			exit 1
			;;

		*)
			if [ $server == undef ]
			then
				if [[ "${1:0:3}" == srv || "$1" == "$infra_hostname" || "$1" == "$master_hostname" ]]
				then
					server=$1
				elif vm_exists $1
				then
					server=$1
				else
					server="srv$1[0-9][0-9]"
				fi
				shift
			else
				error "Arg '$1' invalid."
				LN
				info "$str_usage"
				exit 1
			fi
			;;
	esac
done

if [[ $server == undef && -v ID_DB ]]
then
	server="srv$ID_DB[0-9][0-9]"
	db=$ID_DB
fi

exit_if_param_undef server	"$str_usage"

# Utilisé par wait_vm_until_stopped
typeset		kill_vms=no

# $1 vm name
function wait_vm_until_stopped
{
	typeset -r	vm_name="$1"

	typeset	-ri	wait_max_secs=$timeout_s
	typeset	-i	secs=0

	typeset		display_color

	if [ $kill_vms == yes ]
	then
		if VBoxManage list runningvms | grep -q $vm_name
		then
			warning "Limit of ${wait_max_secs}s passed, poweroff vm $vm_name"
			exec_cmd -c "VBoxManage controlvm $vm_name poweroff"
			LN
		else
			info "$vm_name stopped."
		fi
		return 0
	fi

	hide_cursor
	info -n "Server $vm_name stopping "
	while [ 0 -eq 0 ]
	do
		if ! VBoxManage list runningvms | grep -q $vm_name
		then
			LN
			break
		fi
		info -f -n "${display_color}.${NORM}"
		if [ $secs -eq $wait_max_secs ]
		then
			LN
			warning "$vm_name not stopped after ${secs}s"
			kill_vms=yes
			exec_cmd -c "VBoxManage controlvm $vm_name poweroff"
			LN
			break
		elif [[ $secs -ne 0 && $(( secs % 10 )) -eq 0 ]]
		then
			info -f -n "${display_color}${secs}s${NORM}"
			if [[ $secs -ge 30 && $secs -lt 60 ]]
			then
				display_color=$PURPLE
			elif [[ $secs -ge 60 && $secs -lt 90 ]]
			then
				display_color=$YELLOW
			elif [[ $sec -ge 90 ]]
			then
				display_color=$RED
			fi
		fi
		sleep 1
		((++secs))
	done
	show_cursor
}

#	$1 vm name
function stop_vm
{
	typeset -r vm_to_stop="$1"

	exec_cmd -c "VBoxManage controlvm $vm_to_stop acpipowerbutton"
	if [ $? -ne 0 ]
	then
		error "Failed to stop $vm_to_stop"
		LN

		if [ $error_on_poweroff == yes ]
		then
			((++count_errors))
		else
			line_separator
			info "Poweroff : $vm_to_stop"
			exec_cmd -c "VBoxManage controlvm $vm_to_stop poweroff"
			if [ $? -ne 0 ]
			then
				error "Failed to poweroff $vm_to_stop"
				((++count_errors))
			else
				vm_stopped_list+=( $vm_to_stop )
			fi
		fi
	else
		vm_stopped_list+=( $vm_to_stop )
	fi
}

typeset	-i	timeout_s=120 # passe à 180 pour un RAC 12cR2

typeset	-a	vm_list			# Nom de toutes les VMs running
typeset	-a	vm_stopped_list	# Nom des VMs stoppées.
typeset	-i	count_errors=0

# Si arrêt de la VM d'infra alors tous les serveurs de base de données sont
# stoppés. Le nom des serveurs de base de données commence par srv.
[ "$server" == "$infra_hostname" ] && server="srv" || true

if [ "$db" != "none" ]
then
	if cfg_exists $db use_return_code
	then
		cfg_load_node_info $db 1
		if [[ $cfg_db_type == rac && $cfg_orarel == 12.2.0.1 ]]
		then
			timeout_s=180
			info "RAC 12cR2 set timeout to ${timeout_s}s"
			LN
		fi
	fi
fi

#===============================================================================
# Mémorise dans vm_list le nom des VMs runnings correspondantes au pattern $server
while read vm_name
do
	[ x"$vm_name" != x ] && vm_list+=( $vm_name ) || true
done<<<"$(VBoxManage list runningvms | grep -E "$server" | cut -d\" -f2)"

[ "$server" == srv ] && info "Stop infra server : $infra_hostname" || true
info "${#vm_list[@]} running VMs found for pattern $server : ${vm_list[@]}"
LN

if [ ${#vm_list[@]} -eq 0 ]
then
	[ "$server" != srv ] && exit 0 || true
else
	#===========================================================================
	# Stop les VMs et mémorise leurs noms dans vm_stopped_list
	line_separator
	for vm in ${vm_list[@]}
	do
		stop_vm "$vm"
		LN
	done

	#===========================================================================
	if [[ $EXEC_CMD_ACTION == EXEC && $wait_os == yes ]]
	then	# Attend que toutes les VMs soient stoppée.
		typeset -ri	stop_at=$SECONDS
		line_separator
		typeset -i count=0
		for vm_2_wait in ${vm_stopped_list[*]}
		do
			wait_vm_until_stopped "$vm_2_wait"
			[ $count -ne 0 ] && LN || true
			((++count))
		done
		typeset -ri	duration=$(( SECONDS - stop_at ))
		info "Total waiting : $(fmt_seconds $duration)"
		timing 2
	fi
fi

if [ "$server" == srv ]
then # Arrêt de la VM d'infra quand tous les serveurs sont stoppés.
	stop_vm $infra_hostname
	if [[ $EXEC_CMD_ACTION == EXEC && $wait_os == yes ]]
	then
		wait_vm_until_stopped $infra_hostname
		timing 2
	fi
fi

#===============================================================================
if [ $count_errors -ne 0 ]
then
	warning "$count_errors failed."
	exit 1
else
	exit 0
fi
