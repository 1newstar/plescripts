#!/bin/bash
# vim: ts=4:sw=4

. ~/plescripts/plelib.sh
. ~/plescripts/global.cfg
EXEC_CMD_ACTION=EXEC

typeset -r ME=$0
typeset -r str_usage=\
"Usage : $ME
	-server=<nom de la VM> si omis essait la variable ID_DB
	[-wait_os]     : attend que l'OS soit stoppé avant de rendre la main.
	[-reboot_vbox] : reboot tous les composants de vbox.
"

info "$ME $@"

typeset server=undef
typeset	wait_os=no
typeset reboot_vbox=no

while [ $# -ne 0 ]
do
	case $1 in
		-emul)
			EXEC_CMD_ACTION=NOP
			first_args=-emul
			shift
			;;

		-server=*)
			server=${1##*=}
			shift
			;;

		-wait_os)
			wait_os=yes
			shift
			;;

		-reboot_vbox)
			reboot_vbox=yes
			shift
			;;

		-h|-help|help)
			info "$str_usage"
			LN
			exit 1
			;;

		*)
			if [ $server == undef ]
			then
				server=$1
				shift
			else
				error "Arg '$1' invalid."
				LN
				info "$str_usage"
				exit 1
			fi
			;;
	esac
done

[[ $server == undef ]] && [[ -v ID_DB ]] && server=$ID_DB
exit_if_param_undef server	"$str_usage"

function wait_os
{
	typeset -r os_name="$1"

	info "Server $os_name stopping...."
	while [ 0 -eq 0 ]
	do
		VBoxManage list runningvms | grep -q $os_name
		[ $? -eq 1 ] && break
	done
}


function virtualbox_stop
{
	typeset -a vm_list
	typeset -i ivm=0

	while read vm_name
	do
		if [ x"$vm_name" != x ]
		then
			vm_list[$ivm]=$vm_name
			ivm=ivm+1
		fi
	done<<<"$(VBoxManage list vms | grep "$server" | cut -d\" -f2)"

	typeset -ri max_vms=${#vm_list[@]}

	info "$max_vms server(s) found for pattern $server : ${vm_list[@]}"
	[ $max_vms -eq 0 ] && exit 1

	# Mémorise les VMs qui sont stoppées par un acpipowerbutton
	typeset -a vm_wait_os_list
	typeset	-i ivm_2_wait=0

	typeset -i count_errors=0

	for ivm in $( seq 0 $(( max_vms - 1 )) )
	do
		line_separator
		exec_cmd -c "VBoxManage controlvm ${vm_list[$ivm]} acpipowerbutton"
		if [ $? -ne 0 ]
		then
			error "Failed to stop ${vm_list[$ivm]}"
			LN

			line_separator
			info "Poweroff : ${vm_list[$ivm]}"
			exec_cmd -c "VBoxManage controlvm ${vm_list[$ivm]} poweroff"
			if [ $? -ne 0 ]
			then
				error "Failed to poweroff ${vm_list[$ivm]}"
				count_errors=count_errors+1
			fi
		else
			vm_wait_os_list[$ivm_2_wait]=${vm_list[$ivm]}
			ivm_2_wait=ivm_2_wait+1
		fi
		LN
	done

	if [ $wait_os == yes ]
	then
		typeset -ri	stop_at=$SECONDS
		line_separator
		for os_2_wait in ${vm_wait_os_list[*]}
		do
			wait_os "$os_2_wait"
			LN
		done
		typeset -ri	duration=$(( SECONDS - stop_at ))
		info "Total wait : $(fmt_seconds $duration)."
		timing 2
	fi

	if [ $count_errors -ne 0 ]
	then
		warning "$count_errors failed."
		exit 1
	else
		if [[ $reboot_vbox == yes && $(VBoxManage list runningvms | wc -l) -eq 1 ]]
		then # Ne fonctionnera qu'avec l'option -wait_os
			exec_cmd "~/plescripts/virtualbox/restart_vboxdrv.sh"
		fi
		exit 0
	fi
}

[ $reboot_vbox == yes ] && wait_os=yes

case ${hostvm##*_} in
	virtualbox)
		virtualbox_stop
		;;

	*)
		error "${hostvm##*_} not implemented."
		exit 1
		;;
esac
