#!/bin/bash
# vim: ts=4:sw=4

. ~/plescripts/plelib.sh
. ~/plescripts/cfglib.sh
. ~/plescripts/networklib.sh
. ~/plescripts/global.cfg
EXEC_CMD_ACTION=EXEC

typeset -r ME=$0
typeset -r PARAMS="$*"

typeset -r str_usage=\
"Usage : $ME
	[-db=<str>]            Préciser la base sinon s'appuie sur set_db
	[2]                    N° du nœud pour un dataguard, par défaut le 1.
	[-server=<str>]        Nom du serveur à attendre.
	[-wait_time_secs=<#>]  Temps de pause entre chaque tentative.

	-db et -server ne peuvent être utiliser en même temps.

Autre utilisation : ${ME##*/} id est équivalent à ${ME##*/} -db=id
"

typeset		db=undef
typeset	-i	dg_node=1
typeset		server_name=undef
typeset	-i	wait_time_secs=10

while [ $# -ne 0 ]
do
	case $1 in
		-server=*)
			server_name=${1##*=}
			shift
			;;

		-db=*)
			db=${1##*=}
			shift
			;;

		-wait_time_secs=*)
			wait_time_secs=${1##*=}
			shift
			;;

		2)
			dg_node=2
			shift
			;;

		-h|-help|help)
			info "$str_usage"
			LN
			exit 1
			;;

		*)
			if [ "$db" == undef ]
			then
				db=$1
				shift
			else
				error "Arg '$1' invalid."
				LN
				info "$str_usage"
				exit 1
			fi
			;;
	esac
done

if [ $server_name != undef ]
then
	if [ $db != undef ]
	then
		error "Utiliser -server ou -db mais pas lès 2."
		LN
		info "$str_usage"
		LN
		exit 1
	fi
elif [ $db == undef ]
then
	[[ -v ID_DB ]] && db=$ID_DB || true
	exit_if_param_undef db "$str_usage"
fi

if [ $server_name == undef ]
then
	cfg_exists $db
	typeset -ri max_nodes=$(cfg_max_nodes $db)
	cfg_load_node_info $db $dg_node

	# Pour un RAC utilise l'adresse de scan.
	if [ $cfg_db_type == rac ]
	then
		server_name=$db-scan
	else
		if [ $dg_node -gt 1 ]
		then
			if [ $cfg_dataguard == no ]
			then
				error "$db not a dataguard."
				LN
				exit 1
			fi
		fi
		server_name=$(printf "srv%s%02d" ${db} $dg_node)
	fi
fi

if [[ $disable_dns_cache == yes && $cfg_db_type == rac ]]
then
	exec_cmd sudo systemctl stop nscd.service
fi

wait_server $server_name
ret=$?
if [[ $disable_dns_cache == yes && $cfg_db_type == rac ]]
then
	exec_cmd sudo systemctl start nscd.service
fi

[ $ret -ne 0 ] && exit 1 || true

start_s=$SECONDS
typeset -i wait_time_s=$wait_time_secs
while true
do
	exec_cmd -c "ssh grid@$server_name \". ~/.profile; crsctl stat res -t\""
	[ $? -eq 0 ] && exit 0 || true

	info -n "Waiting : "; pause_in_secs $wait_time_s
	duration=$(( $SECONDS - $start_s ))
	info -f ", ${YELLOW}Total wait $(fmt_seconds $duration)${NORM}..."
	LN

	[ $wait_time_s -gt 60 ] && wait_time_s=wait_time_s-60 || true

	if [[ $wait_time_secs -gt 60 && $wait_time_s -lt 60 ]]
	then
		wait_time_s=wait_time_secs
	fi
done
