#!/bin/bash
# vim: ts=4:sw=4

. ~/plescripts/plelib.sh
. ~/plescripts/vmlib.sh
. ~/plescripts/cfglib.sh
. ~/plescripts/global.cfg
EXEC_CMD_ACTION=EXEC

typeset -r ME=$0
typeset -r PARAMS="$*"

typeset -r str_usage=\
"Usage : $ME"

typeset db=undef

while [ $# -ne 0 ]
do
	case $1 in
		-emul)
			EXEC_CMD_ACTION=NOP
			shift
			;;

		-h|-help|help)
			info "$str_usage"
			LN
			exit 1
			;;

		*)
			error "Arg '$1' invalid."
			LN
			info "$str_usage"
			exit 1
			;;
	esac
done

# $1 vm name
function print_vm_running_status
{
	if vm_running $1
	then
		info -n -f "${UNDERLINE}$1${NORM}"
	else
		info -n -f "$1"
	fi
	info -n -f " ($(vm_memory_size $1))"
}

# $1 dbid
function print_vm_database
{
	typeset -r	dbid=$1

	if ! cfg_exists $dbid use_return_code 1>/dev/null 2>&1
	then
		warning "Configuration not exists for $dbid."
		LN
		return 0
	fi

	typeset	-r	str_dbid=$(printf "%-8s" $dbid)
	typeset	-ri	max_nodes=$(cfg_max_nodes $dbid)

	cfg_load_node_info $dbid 1

	if [[ $max_nodes -eq 2 && $cfg_dataguard == no ]]
	then
		vm_printed_list="$vm_printed_list $cfg_server_name"
		if vm_exists $cfg_server_name
		then
			info -n "$str_dbid : RAC Oracle $cfg_orarel, $(print_vm_running_status $cfg_server_name), "
		else
			info -n "$str_dbid : RAC Oracle $cfg_orarel, server not exist"
		fi
		cfg_load_node_info $dbid 2
		if vm_exists $cfg_server_name
		then
			print_vm_running_status $cfg_server_name
		else
			info -n -f ", server not exists"
		fi
		vm_printed_list="$vm_printed_list $cfg_server_name"
	elif [ $cfg_dataguard == yes ]
	then
		vm_printed_list="$vm_printed_list $cfg_server_name"
		if vm_exists $cfg_server_name
		then
			info -n "$str_dbid : Dataguard Oracle $cfg_orarel, $(print_vm_running_status $cfg_server_name), "
		else
			info -n "$str_dbid : Dataguard Oracle $cfg_orarel, server not exist"
		fi
		cfg_load_node_info $dbid 2
		if vm_exists $cfg_server_name
		then
			print_vm_running_status $cfg_server_name
		else
			info -n -f ", server not exist"
		fi
		vm_printed_list="$vm_printed_list $cfg_server_name"
	else
		vm_printed_list="$vm_printed_list $cfg_server_name"
		if vm_exists $cfg_server_name
		then
			info -n "$str_dbid : Oracle $cfg_orarel, $(print_vm_running_status $cfg_server_name)"
		else
			info -n "$str_dbid : Oracle $cfg_orarel, server not exists"
		fi
	fi
	info -n -f ", storage $cfg_luns_hosted_by"
	case $cfg_db_type in
		std|rac)
			info -f "/ASM"
			;;

		fs)
			info -f "/FS"
			;;
	esac
	LN
}

#ple_enable_log -params $PARAMS

info "Infra :"
info "Database master       $(print_vm_running_status $master_hostname)"
info "Server infrastructure $(print_vm_running_status $infra_hostname)"
LN

typeset	vm_printed_list="$master_hostname $infra_hostname"

line_separator
info "Databases :"
LN

while read fullpath
do
	[ x"$fullpath" != x ] && print_vm_database ${fullpath##*/} || true
done<<<"$(find ~/plescripts/database_servers/* -type d)"

# Recherche si d'autres VM exists.
typeset	-i	count=0
while read vm_name
do
	[ x"$vm_name" == x ] && continue || true

	if ! grep -qE "\<$vm_name\>"<<<"$vm_printed_list"
	then
		((++count))
		if [ $count -eq 1 ]
		then
			line_separator
			info "Others VM :"
		fi
		info "$(print_vm_running_status $vm_name)"
		LN
	fi
done<<<"$(VBoxManage list vms | cut -d\" -f2)"
