#!/bin/bash
# vim: ts=4:sw=4

. ~/plescripts/plelib.sh
. ~/plescripts/cfglib.sh
. ~/plescripts/global.cfg
EXEC_CMD_ACTION=EXEC

typeset -r ME=$0
typeset -r PARAMS="$*"
typeset -r str_usage=\
"Usage :
${ME##*/} [-db=id]	(or use ID_DB)

Must be executed from $client_hostname : show oracle logs"

typeset db=undef

while [ $# -ne 0 ]
do
	case $1 in
		-emul)
			EXEC_CMD_ACTION=NOP
			first_args=-emul
			shift
			;;

		-db=*)
			db=${1##*=}
			shift
			;;

		-h|-help|help)
			info "$str_usage"
			LN
			exit 1
			;;

		*)
			error "Arg '$1' invalid."
			LN
			info "$str_usage"
			exit 1
			;;
	esac
done

[[ $db = undef ]] && [[ -v ID_DB ]] && db=$ID_DB
exit_if_param_undef db	"$str_usage"

# swap instance number :
#	si $1 == DONALD1 print to stdout DONALD2
#	si $1 == DONALD_2 print to stdout DONALD_1
function swap_instance_number
{
	typeset		inst="$1"
	typeset	-ri	l=${#inst}-1
	typeset -ri	nu=${inst:$l}
	if [ $nu -eq 1 ]
	then
		echo "${inst:0:$l}2"
	else
		echo "${inst:0:$l}1"
	fi
}

typeset -r	upper_db=$(to_upper $db)

cfg_exists $db

typeset -r	max_nodes=$(cfg_max_nodes $db)

[ $max_nodes -gt 2 ] && error "Maximum RAC 2 nœuds" && exit 1

cfg_load_node_info $db 1
typeset -r	server1=$cfg_server_name

typeset 	inst1=$(ssh oracle@$server1 plescripts/db/get_active_instance.sh)

set_terminal_title "ORCL LOGS"
trap 'set_terminal_title default' EXIT

if [ $max_nodes -eq 2 ]
then	#	RAC 2 nœuds.
	cfg_load_node_info $db 2
	typeset -r	server2=$cfg_server_name
	typeset		inst2

	# Pour les RAC Policy Managed ou One Node on ne connait pas le n° de
	# l'instance démarrée sur le serveur.

	# Boucle tant qu'une instance n'est pas démarrée.
	while [[ x"$inst1" == x && x"$inst2" == x ]]
	do
		timing 5
		info "Test si l'instance sur $server2 est démarrée."
		inst2=$(ssh oracle@$server2 plescripts/db/get_active_instance.sh)
		if [ x"$inst2" == x ]
		then
			info "Test si l'instance sur $server1 est démarrée."
			inst1=$(ssh oracle@$server1 plescripts/db/get_active_instance.sh)
		fi
		LN
	done

	# Une instance est démarrée, déduction du nom de l'autre instance.
	if [ x"$inst1" == x ]
	then
		inst1=$(swap_instance_number $inst2)
	else
		inst2=$(swap_instance_number $inst1)
	fi

	info "Server $server1 running instance $inst1"
	info "Server $server2 running instance $inst2"
	LN

	typeset -r	session_name="ORCL Top $server1 / Bottom $server2"
	exec_cmd -c tmux kill-session -t \"$session_name\"

	alert1=$(printf "\$ORACLE_BASE/diag/rdbms/%s/%s/trace/alert_%s.log" $db $inst1 $inst1)
	alert2=$(printf "\$ORACLE_BASE/diag/rdbms/%s/%s/trace/alert_%s.log" $db $inst2 $inst2)

	tmux new -s "$session_name"	\
		"ssh oracle@${server1} '. .profile; tail -1000f $alert1'"	\;\
	split-window -v				\
		"ssh oracle@${server2} '. .profile; tail -1000f $alert2'"	\;\
	selectp -t 0

else	#	Mono Instance.
	if [ x"$inst1" == x ]
	then #  L'instance est arrêtée Pour les SINGLE db pas de problème pour lire /etc/oratab...
		inst1=$(ssh oracle@$server1 grep "^[A-Z].*" /etc/oratab | cut -d: -f1)
	fi

	if [ "$cfg_standby" != none ]
	then
		db_stby=$cfg_standby
		cfg_load_node_info $cfg_standby 1
		if ping -c 1 $cfg_server_name >/dev/null 2>&1
		then
			server2=$cfg_server_name
			inst2=$(ssh oracle@$server2 plescripts/db/get_active_instance.sh)
			if [ x"$inst2" == x ]
			then #  L'instance est arrêtée Pour les SINGLE db pas de problème pour lire /etc/oratab...
				inst2=$(ssh oracle@$server2 grep "^[A-Z].*" /etc/oratab | cut -d: -f1)
			fi

			typeset -r	session_name="Left $db / Right $db_stby"
			exec_cmd -c tmux kill-session -t \"$session_name\"

			alert1=$(printf "\$ORACLE_BASE/diag/rdbms/%s/%s/trace/alert_%s.log" $db $inst1 $inst1)
			drc1=$(printf "\$ORACLE_BASE/diag/rdbms/%s/%s/trace/drc%s.log" $db $inst1 $inst1)
			alert2=$(printf "\$ORACLE_BASE/diag/rdbms/%s/%s/trace/alert_%s.log" $db_stby $inst2 $inst2)
			drc2=$(printf "\$ORACLE_BASE/diag/rdbms/%s/%s/trace/drc%s.log" $db_stby $inst2 $inst2)

			info "Alert logs"
			info "$alert1"
			info "$alert2"
			LN
			info "Dataguard broker logs"
			info "$drc1"
			info "$drc2"
			LN

			tmux new -s "$session_name"		\
				"ssh oracle@${server1} '. .profile; tail -1000f $alert1'"	\;\
			split-window -h					\
				"ssh oracle@${server2} '. .profile; tail -1000f $alert2'"	\;\
			split-window -v					\
				"ssh oracle@${server2} '. .profile; tail -1000f $drc2'"		\;\
			selectp -t 0 \; split-window -v	\
				"ssh oracle@${server1} '. .profile; tail -1000f $drc1'"
			exit 0
		else
			error "ping of $cfg_server_name failed."
		fi
	fi

	typeset -r	session_name="ORCL $server1"
	exec_cmd -c tmux kill-session -t \"$session_name\"
	alert1=$(printf "\$ORACLE_BASE/diag/rdbms/%s/%s/trace/alert_%s.log" $(to_lower $inst1) $inst1 $inst1)
	ssh oracle@${server1} ". .profile; tail -1000f $alert1"
fi
